{"version":3,"sources":["serviceWorker.js","components/Articles.js","components/Mostviewed.js","index.js"],"names":["Boolean","window","location","hostname","match","Articles","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","getItems","_this2","fetch","then","results","json","setState","y","map","subRowdata","re","ImageList","media","fetchData","index","z","react_default","a","createElement","Image","src","key","roundedCircle","className","react_router_dom","to","concat","id","title","byline","SpanRight","published_date","Fragment","Component","styled","span","_templateObject","Mostviewed","_this3","params","props","ss","getmedia","caption","mediametadata","fetchdata","ima","abstract","onClick","history","goBack","routing","basename","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f564626.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { data } from \"../api\";\r\n\r\nexport default class Articles extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      items: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.getItems();\r\n  }\r\n  getItems() {\r\n    fetch(\r\n      \"https://api.nytimes.com/svc/mostpopular/v2/mostviewed/all-sections/7.json?api-key=qG808Xn6G5zAb6Wm0e6hS52JQjS6L2Er\"\r\n    )\r\n      .then(results => results.json())\r\n      .then(results => this.setState({ items: results }));\r\n  }\r\n\r\n  render() {\r\n    let y = this.state.items;\r\n    let results;\r\n    if (y != \"\") {\r\n      let ww = y.results;\r\n      results = ww.map((subRowdata, re) => {\r\n        // Fetching Image\r\n        let getMedia = subRowdata.media;\r\n        let ImageList, images;\r\n        ImageList = getMedia.map((fetchData, index) => {\r\n          images = fetchData[\"media-metadata\"];\r\n          let z = images[0];\r\n          // Passing Image\r\n          return <Image src={z[\"url\"]} key={index} roundedCircle />;\r\n        });\r\n\r\n        return (\r\n          <div className=\"py-2\" key={re}>\r\n            <div className=\"container\">\r\n              <HashRouter>\r\n                <Link to={`/detail/${subRowdata.id}`}>\r\n                  <div className=\"card\">\r\n                    <div className=\"card-body al-c\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-2\">\r\n                          <div className=\"circleImg\">{ImageList}</div>\r\n                        </div>\r\n                        <div className=\"col-10\">\r\n                          <h5 className=\"card-title\">{subRowdata.title}</h5>\r\n                          <p className=\"card-text by\">{subRowdata.byline}</p>\r\n                          <SpanRight className=\"pull-right date\">\r\n                            {subRowdata.published_date}\r\n                          </SpanRight>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Link>\r\n              </HashRouter>\r\n            </div>\r\n          </div>\r\n        );\r\n      });\r\n      // );\r\n    } else {\r\n      results = \"\";\r\n    }\r\n\r\n    return <React.Fragment>{results}</React.Fragment>;\r\n  }\r\n}\r\n\r\nconst SpanRight = styled.span`\r\n  float: right;\r\n`;\r\n","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { data } from \"../api\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Image } from \"react-bootstrap\";\r\n\r\nexport default class Mostviewed extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      items: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.getItems();\r\n  }\r\n  getItems() {\r\n    fetch(\r\n      \"https://api.nytimes.com/svc/mostpopular/v2/mostviewed/all-sections/7.json?api-key=qG808Xn6G5zAb6Wm0e6hS52JQjS6L2Er\"\r\n    )\r\n      .then(results => results.json())\r\n      .then(results => this.setState({ items: results }));\r\n  }\r\n  render() {\r\n    const { params } = this.props.match;\r\n    let y = this.state.items;\r\n    let results;\r\n    if (y != \"\") {\r\n      let ww = y.results;\r\n      results = ww.map((subRowdata, ss) => {\r\n        let ImageList;\r\n        // Validating By Id\r\n        if (subRowdata.id == params.id) {\r\n          //Fetching Image and Caption\r\n          let getmedia = subRowdata.media;\r\n          let caption = getmedia[0][\"caption\"];\r\n          let x = getmedia.mediametadata;\r\n          let images;\r\n          ImageList = getmedia.map((fetchdata, ima) => {\r\n            images = fetchdata[\"media-metadata\"];\r\n            let z = images[4];\r\n\r\n            // Returns Image\r\n            return (\r\n              <React.Fragment key={ima}>\r\n                <div className=\"myImg\">\r\n                  <Image src={z[\"url\"]} />\r\n                  <p>{caption}</p>\r\n                </div>\r\n              </React.Fragment>\r\n            );\r\n          });\r\n        }\r\n        // Validating Data by Id\r\n        if (subRowdata.id == params.id) {\r\n          return (\r\n            <React.Fragment key={ss}>\r\n              <div className=\"container myDetail\" key={ss}>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-12\">\r\n                    <div className=\"myThumbnail\">{ImageList}</div>\r\n                    <small>\r\n                      <span>{subRowdata.published_date}</span>\r\n                    </small>\r\n                    <h2>{subRowdata.title}</h2>\r\n                    <p>{subRowdata.abstract}</p>\r\n                    <div className=\"col-md-12 text-center\">\r\n                      <button\r\n                        className=\"btn btn-primary\"\r\n                        onClick={this.props.history.goBack}\r\n                      >\r\n                        Previous Page\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </React.Fragment>\r\n          );\r\n        } else {\r\n          return;\r\n        }\r\n      });\r\n    } else {\r\n      results = \"\";\r\n    }\r\n    return <React.Fragment>{results}</React.Fragment>;\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport \"./index.css\";\nimport \"./App.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Articles from \"./components/Articles\";\nimport Mostviewed from \"./components/Mostviewed\";\n\nconst routing = (\n  <HashRouter basename=\"/\">\n    <div>\n      <Route exact path=\"/\" component={Articles} />\n      <Route path=\"/detail/:id\" component={Mostviewed} />\n    </div>\n  </HashRouter>\n);\nReactDOM.render(routing, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}